#!/usr/bin/env murex

$project = "github.com/lmorg/murex"

$ENV.GOARM    = 7
#$ENV.GOFLAGS = "-trimpath -modcacherw"
$LD_FLAGS     = "-extldflags=-static"
$tags         = "${open builtins/optional/standard-opts.txt},sqlite_omit_load_extension,osusergo,netgo"

args: args %{
    AllowAdditional: false
    Flags: %{
        --no-colour:  bool
        --no-color:   --no-colour
        --compress:   bool
        --inc-latest: bool
    }
}
catch {
    err $args[Error]
    exit 1
}

go env GOVERSION -> regexp 'f/([1-9]+\.[0-9]+)/' -> set num goversion
# Please note that versions of go < 1.16 will not be detected due to `go env GOVERSION`
# not existing on earlier versions of `go`

if { $args[[/Flags/--no-colour]] } then {
    config set shell color false
    config set proc force-tty true
}

function compress {
    if { $ARGS.2 } then {
        zip -q $(ARGS.1).zip $ARGS.1
        rm $ARGS.1
    } else {
        gzip $ARGS.1
    }
}

mkdir -p bin

# Platforms supported by the go compiler.
# All 32bit ARM targets will be for ARMv7.
targets = %{
    linux:     [ 386  amd64  arm  arm64 riscv64 ]
    freebsd:   [ 386  amd64  arm  arm64         ]
    openbsd:   [ 386  amd64  arm  arm64         ]
    netbsd:    [ 386  amd64  arm  arm64         ]
    dragonfly: [      amd64                     ]
    darwin:    [      amd64       arm64         ]
    solaris:   [      amd64                     ]
    plan9:     [ 386  amd64  arm                ]
    windows:   [ 386  amd64  arm  arm64         ]
}

status = 0

# Assumes the same version is running this script as the source.
# This is a bad assumption to make and ideally there should be a pre-compiled
# version.
$version = version(--short)

go mod download

$targets -> formap os cpus {
    $cpus -> foreach arch {
        if { $os == "windows" } then { $ext = ".exe" } else { $ext = "" }

        try {
            ({BLUE}Building $(os)/$(arch)....{RESET})
            $ENV.GOOS   = $os
            $ENV.GOARCH = $arch

            $bin = "./bin/murex-$(version)-$(os)-$(arch)$(ext)"

            go build -ldflags $LD_FLAGS -tags $tags -o $bin $project
            
            !if { $args[[/Flags/--compress]] } else { compress $bin $ext }
            
            out "{GREEN}SUCCESSFUL{RESET}"
        }
        catch {
            out "{RED}FAILED{RESET}"
            status=statue+1
        }
    }
}

if { and { $args[[/Flags/--inc-latest]] } { os posix } } then {
    cd bin
    mkdir -p latest
    g * -> foreach src {
        if { $src != "latest" } then {
            $src -> sed s/-$(version)// -> set dest
            cp -v $src latest/$(dest)
        }
    }
    cd ..
}

exit $status