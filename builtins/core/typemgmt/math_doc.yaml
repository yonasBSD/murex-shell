- DocumentID: equ
  Title: >+
    Arithmetic Evaluation: `=`
  CategoryID: deprecated
  SubCategoryIDs: [ deprecated.commands ]
  Summary: >-
    Evaluate a mathematical function (removed 7.0)
  Description: |-
    `=` evaluates a mathematical function and returns it's output

    **This is a deprecated feature. Please refer to [`expr`](expr.md) instead.**
  Usage: |-
    ```
    <stdin> -> = evaluation -> <stdout>

    = evaluation -> <stdout>
    ```
  Examples: |-
    ### As a method
    
    ```
    » let age=18
    » $age -> = < 21
    true

    » $age -> = < 21 -> if { out "Under 21" } else { out "Over 21" }
    Under 21
    ```
    
    ### As a function
    
    ```
    » let age=18
    » = age < 21
    true

    » = age < 21 -> if { out "Under 21" } else { out "Over 21" }
    Under 21
    ```

    ### Inlining as a function

    ```
    » let age=18
    » if { = age < 21 } then { out "Under 21" } else { out "Over 21" }
    Under 21
    ```
  Flags:
  Detail: |-
    {{ include "gen/includes/math.inc.md" }}
  Synonyms:
  - "="
  Related:
  - item-index
  - element
  - global
  - let
  - set
  - global
  - export
  - brace-quote
  - if
  - scoping
  - reserved-vars
  - expr


- DocumentID: let
  Title: >+
    Integer Operations: `let`
  CategoryID: deprecated
  SubCategoryIDs: [ deprecated.commands ]
  Summary: >-
    Evaluate a mathematical function and assign to variable (removed 7.0)
  Description: |-
    `let` evaluates a mathematical function and then assigns it to a locally
    scoped variable (like `set`)

    **This is a deprecated feature. Please refer to [`expr`](expr.md) instead.**
  Usage: |-
    ```
    let var_name=evaluation
    
    let var_name++

    let var_name--
    ```
  Examples: |-
    ```
    » let age=18
    » $age
    18

    » let age++
    » $age
    19

    » let under18=age<18
    » $under18
    false

    » let under21 = age < 21
    » $under21
    true
    ```
  Flags:
  Detail: |-
    ### Other Operators

    `let` also supports the following operators (substitute **VAR** with your
    variable name, and **NUM** with a number):

    * `VAR--`, subtract 1 from VAR
    * `VAR++`, add 1 to VAR
    * `VAR -= NUM`, subtract NUM from VAR
    * `VAR += NUM`, add NUM to VAR
    * `VAR /= NUM`, divide VAR by NUM
    * `VAR *= NUM`, multiply VAR by NUM

    eg

    ```
    » let i=0
    » let i++
    » $i
    1

    » let i+=8
    » $i
    9
    
    » let i/=3
    3
    ```

    Please note these operators are not supported by `=`.

    {{ include "gen/includes/math.inc.md" }}

    {{ include "gen/includes/variables.inc.md" }}
  Synonyms:
  Related:
  - item-index
  - element
  - set
  - global
  - export
  - equ
  - brace-quote
  - if
  - scoping
  - reserved-vars
  - expr