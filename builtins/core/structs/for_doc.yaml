- DocumentID: for
  Title: >+
    For Loop: `for`
  CategoryID: commands
  SubCategoryIDs:
    - commands.lang
    - commands.loop
  Summary: >-
    A more familiar iteration loop to existing developers
  Description: |-
    This `for` loop is fills a small niche where `foreach` or `formap` are
    inappropriate in your script. It's generally not recommended to use `for`
    because it performs slower and doesn't adhere to Murex's design
    philosophy. However it does offer additional flexibility around recursion.
  Usage: |-
    ```
    for { variable; conditional; incrementor } { code-block } -> <stdout>
    ```
  Examples: |-
    ```
    Â» for {$i=1; $i<6; $i++} { out "iteration $i" }
    iteration 1
    iteration 2
    iteration 3
    iteration 4
    iteration 5
    ```
  Flags:
  Detail: |-
    ### Syntax

    `for` is a little naughty in terms of breaking Murex's style guidelines due
    to the first parameter being entered as one string treated as 3 separate code
    blocks. The syntax is like this for two reasons:
      
    1. readability, having multiple `{ blocks }` would make scripts unsightly
    2. familiarity for those using to `for` loops in other languages

    Take the following example:

    ```
    for {$i=1; $i<6; $i++} { out "iteration $i" }
    ```

    The first parameter is: `{$i=1; $i<6; $i++}`, this is then converted into the
    following code:

    1. `$i=1` - declare the loop iteration variable
    2. `$i<6` - if the condition is true then proceed to run the code in
    the second parameter - `{ echo $i }`
    3. `$i++` - increment the loop iterator variable

    The second parameter is the code to execute upon each iteration

    {{ include "gen/includes/for-loop-json-tips.inc.md" }}
  Synonyms:
  Related:
    - formap
    - foreach
    - while
    - if
    - let
    - set
    - a
    - ja
    - break
