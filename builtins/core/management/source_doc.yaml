- DocumentID: source
  Title: >+
    Include / Evaluate Murex Code (`source`)
  CategoryID: commands
  SubCategoryIDs:
    - commands.proc
    - commands.shell
  Summary: >-
    Import Murex code from another file or code block
  Description: |-
    `source` imports code from another file or code block. It can be used as either
    an "import" / "include" directive (eg Python, Go, C, etc) or an "eval" (eg
    Python, Perl, etc).
  Usage: |-
    ### Execute source from stdin

    ```
    <stdin> -> source
    ```

    ### Execute source from a file

    ```
    source filename.mx
    ```

    ### Execute a code block from parameter

    ```
    source { code-block }
    ```

    ### Execute a module

    ```
    source module:package/module
    ```
  Examples: |-
    ### Execute source from stdin

    ```
    » tout block { out "Hello, world!" } -> source
    Hello, world!
    ```

    ### Execute source from file

    ```
    » tout block { out "Hello, world!" } |> example.mx
    » source example.mx
    Hello, world!
    ```

    ### Execute a code block from parameter

    ```
    » source { out "Hello, world!" }
    Hello, world!
    ```

    ### Execute a module

    Lets say we want to use the `secrets` function from the `devops` package. This
    `secrets` function allows us to store and recall GPG encrypted API keys, so
    pretty useful functionality for a script. But since this is a script, it
    wouldn't automatically load all of the profiles and nor would we want it to.

    So we could prepend the following to our script:

    ```
    source module:devops/secret
    ```
  Flags:
  Detail:
  Synonyms:
    - source
    - "."
  Related:
    - config
    - runtime
    - function
    - private
    - murex-parser
    - version
    - autocomplete
    - args
    - exec
    - fexec
