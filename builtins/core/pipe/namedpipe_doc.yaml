- DocumentID: namedpipe
  Title: >+
    Read / Write To A Named Pipe: `<pipe>`
  CategoryID: parser
  SubCategoryIDs:
    - commands.io
    - parser.pipes
  Summary: >-
    Reads from a Murex named pipe
  Description: |-
    Sometimes you will need to start a command line with a Murex named pipe, eg

    ```
    » <namedpipe> -> match foobar
    ```

    > See the documentation on `pipe` for more details about Murex named pipes.
  Usage: |-
    ### Read from pipe

    ```
    <namedpipe> -> <stdout>
    ```

    ### Write to pipe

    ```
    <stdin> -> <namedpipe>
    ```
  Examples: |-
    ```
    » pipe example
    » bg { <example> -> match 2 }
    » a <example> [1..3]
    2
    » !pipe example
    ```
  Flags:
  Detail: |-
    {{ include "gen/includes/named-pipes.inc.md" }}
  Synonyms:
    - "(murex named pipe)"
    - "<>"
    - read-named-pipe
  Related:
    - pipe
    - stdin
    - bg
    - a
    - ja
    - runtime



- DocumentID: stdin
  Title: >+
    Read From Stdin: `<stdin>`
  CategoryID: parser
  SubCategoryIDs:
    - commands.io
    - parser.pipes
  Summary: >-
    Read the stdin belonging to the parent code block
  Description: |-
    This is used inside functions and other code blocks to pass that block's
    stdin down a pipeline
  Usage: |-
    ```
    <stdin> -> <stdout>
    ```
  Examples: |-
    When writing more complex scripts, you cannot always invoke your read as the
    first command in a code block. For example a simple pipeline might be:

    ```
    » function example { -> match 2 }
    ```

    But this only works if `->` is the very first command. The following would
    fail:

    ```
    # Incorrect code
    function example {
        out "only match 2"
        -> match 2
    }
    ```

    This is where `<stdin>` comes to our rescue:

    ```
    function example {
        out "only match 2"
        <stdin> -> match 2
    }
    ```

    This could also be written as:

    ```
    function example { out "only match 2"; <stdin> -> match 2 }
    ```
  Flags:
  Detail: |-
    `<stdin>` makes use of a feature called **named pipes**, which are a way of
    piping data between processes without chaining them together as a single
    command pipeline (eg commands delimited with `|`, `->`, `=>`, `?` tokens).

    {{ include "gen/includes/named-pipes.inc.md" }}
  Synonyms:
    - "<stdin>"
  Related:
    - pipe
    - namedpipe
    - out
    - function
    - match
    - runtime
    - pipeline
