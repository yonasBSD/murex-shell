- DocumentID: expr
  Title: >+
    Expressions: `expr`
  CategoryID: commands
  SubCategoryIDs:
    - commands.num
    - commands.lang
    - commands.posix
  Summary: >-
    Expressions: mathematical, string comparisons, logical operators
  Description: |-
    `expr` is the underlying builtin which handles all expression parsing and
    evaluation in Murex.
    
    Idiomatic Murex would be to write expressions without explicitly calling the
    underlying builtin:

    ```
    # idiomatic expressions
    1 + 2

    # non-idiomatic expressions
    expr 1 + 2
    ```

    Though you can invoke them via `expr` if needed, please bare in mind that
    expressions have special parsing rules to make them more ergonomic. So if you
    write an expression as a command (ie prefixed with `expr`) then it will be
    parsed as a statement. This means more complex expressions might parse in
    unexpected ways and thus fail. You can still raise a bug if that does happens.

    A full list of operators is available in the {{link "Operators And Tokens" "operators-and-tokens"}}
    document.
  Usage: |-
    ```
    expression -> <stdout>

    statement (expression)

    expr expression -> <stdout>
    ```
  Examples: |-
    ### Basic Expressions

    ```
    » 3 * (3 + 1)
    12
    ```

    ### Statements with inlined expressions

    Any parameter surrounded by parenthesis is first evaluated as an {{link "expression" "expr-inlined"}},
    then as a {{link "string" "brace-quote-func"}}".

    ```
    » out (3 * 2)
    6
    ```

    ### Functions

    Expressions also support running commands as {{link "C-style functions" "c-style-fun"}}, for example:

    ```
    » 5 * out(5)
    25

    » datetime(--in {now} --out {unix}) / 60
    28339115.783333335

    » $file_contents = open(example_file.txt)
    ```

    {{ include "gen/includes/c-style-valid-fun.inc.md" }}

    ### Arrays

    ```
    » %[apples oranges grapes]
    [
        "apples",
        "oranges",
        "grapes"
    ]
    ```

    ({{link "read more" "create-array"}})

    ### Objects

    Sometimes known as dictionaries or maps:
    
    ```
    » %{ Age: { Tom: 20, Dick: 30, Sally: 40 } }
    {
        "Age": {
            "Dick": 30,
            "Sally": 40,
            "Tom": 20
        }
    }
    ```

    ({{link "read more" "create-object"}})
  Detail: |-
    ### Order of Operations

    The order of operations follows the same rules as the C programming language,
    which itself is an extension of the order of operations in mathematics, often
    referred to as PEMDAS or MODMAS ([read more](https://en.wikipedia.org/wiki/Order_of_operations)).

    The [Wikipedia article](https://en.wikipedia.org/wiki/Order_of_operations#Programming_languages)
    summarises that order succinctly however the detailed specification is defined
    by its implementation, as seen in the code below:

    ```go
    {{ include "lang/expressions/expression.go" }}
    ```
  Synonyms:
  Related:
    - addition
    - subtraction
    - multiplication
    - division
    - add-with
    - subtract-by
    - multiply-by
    - divide-by
    - elvis
    - null-coalescing
    - create-array
    - create-object
    - open
    - out
    - strict-types
    - expr-inlined
    - assign-or-merge
