- DocumentID: onprompt
  Title: >+
    `onPrompt`
  CategoryID: events
  Summary: >-
    Events triggered by changes in state of the interactive shell
  Description: |-
    `onPrompt` events are triggered by changes in state of the interactive shell
    (often referred to as _readline_). Those states are defined in the interrupts
    section below.
  Usage: |-
    ```
    event onPrompt name=(before|return|after|command-completion|abort|eof) { code block }

    !event onPrompt name[.before|.return|.after|.command-completion|.abort|.eof]
    ```
  Payload: |-
    {{ include "gen/includes/event-payload-summary.inc.md" }}

    ```
    {
        "Name": "",
        "Interrupt": {
            "Name": "",
            "Operation": "",
            "CmdLine": "",
            "ExitNum": -1
        }
    }
    ```

    ### Name

    This is the **namespaced** name -- ie the name and operation.

    ### Interrupt/Name

    This is the name you specified when defining the event.

    ### Interrupt/Operation

    This is the interrupt you specified when defining the event.

    Valid interrupt operation values are specified below.

    ### Interrupt/CmdLine

    This is the command line executed, ie what you typed into the _readline_ prompt.

    Please note this is only populated if the interrupt is **after** or
    **command-completion**.

    ### Interrupt/ExitNum

    This is the exit number for the command line that is executed.

    Please note this is only populated if the interrupt is **command-completion**
    otherwise it defaults to `-1`.
  Flags:
    before: >-
      Triggered before readline displays the interactive prompt
    return: >-
      Triggered when `return` is pressed while cursor is still on same line as prompt
    after: >-
      Triggered after user has written a command into the interactive prompt and then hit `enter`
    command-completion: >-
      Triggered after a command has completed. Also passes it's exit number via STDIN. A cheaper alternative to onCommandCompletion event
    abort: >-
      Triggered if `ctrl`+`c` pressed while in the interactive prompt
    eof: >-
      Triggered if `ctrl`+`d` pressed while in the interactive prompt
  Examples: |-
    ### Interrupt 'before'

    ```
    event onPrompt example=before {
        out "This will appear before your command prompt"
    }
    ```

    ### Interrupt 'after'

    ```
    event onPrompt example=after {
        out "This will appear after you've hit [enter] on your command prompt"
        out "...but before the command executes"
    }
    ```

    ### Echo the command line

    ```
    » event onPrompt echo=after { -> set event; out $event.Interrupt.CmdLine }
    » echo hello world
    echo hello world
    hello world
    ```
  Detail: |-
    ### Standard out and error

    Stdout and stderr are both written to the terminal. So this event can be used
    to provide multiple additional lines to the prompt since readline only supports
    one line for the prompt itself and three extra lines for the hint text.
  
    {{ include "gen/includes/events-namespacing.inc.md" }}
  Synonyms:
  - onprompt
  - onPrompt
  Related:
  - onkeypress
  - oncommandcompletion
  - onpreview
  - terminal-keys
  - interactive-shell
  - event
  - config