- DocumentID: signal
  Title: >+
    Send Signal IPC: `signal`
  CategoryID: commands
  SubCategoryIDs: [ commands.proc ]
  Summary: >-
    Sends a signal RPC
  Description: |-
    `signal` sends an operating system RPC (known as "signal") to a specified
    process, identified via it's process ID ("pid").

    {{ include "builtins/events/onSignalReceived/signals.inc.md" }}

    ### Listing supported signals

    Signals will differ from one operating system to another. You can retrieve a
    JSON map with supported signals by running `signal` without any parameters.
  Usage: |-
    **Send a signal:**

    1. The first parameter is the process ID (int)
    2. The second parameter is the signal name (str). This will be all in
       UPPERCASE and prefixed "SIG"

    ```
    signal pid SIGNAL
    ```

    **List supported signals:**
    
    ```
    signal -> <stdout>
    ```

  Examples: |-
    ### Send a signal

    ```
    {{ include "behavioural/onSignalReceived.mx" }}
    ```

    ### List supported signals

    ```
    Â» signal
    {
        "SIGABRT": "aborted",
        "SIGALRM": "alarm clock",
        "SIGBUS": "bus error",
        "SIGCHLD": "child exited",
        "SIGCONT": "continued",
        "SIGFPE": "floating point exception",
        "SIGHUP": "hangup",
        "SIGILL": "illegal instruction",
        "SIGINT": "interrupt",
        "SIGIO": "I/O possible",
        "SIGKILL": "killed",
        "SIGPIPE": "broken pipe",
        "SIGPROF": "profiling timer expired",
        "SIGPWR": "power failure",
        "SIGQUIT": "quit",
        "SIGSEGV": "segmentation fault",
        "SIGSTKFLT": "stack fault",
        "SIGSTOP": "stopped (signal)",
        "SIGSYS": "bad system call",
        "SIGTRAP": "trace/breakpoint trap",
        "SIGTSTP": "stopped",
        "SIGTTIN": "stopped (tty input)",
        "SIGTTOU": "stopped (tty output)",
        "SIGURG": "urgent I/O condition",
        "SIGUSR1": "user defined signal 1",
        "SIGUSR2": "user defined signal 2",
        "SIGVTALRM": "virtual timer expired",
        "SIGWINCH": "window changed",
        "SIGXCPU": "CPU time limit exceeded",
        "SIGXFSZ": "file size limit exceeded"
    }
    ```
  Flags:
    SIGINT: >-
      **"Signal interrupt"** -- equivalent to pressing `ctrl`+`c`
    SIGQUIT: >-
      **"Signal quit"** -- requests the process quits and performs a core dump
    SIGTERM: >-
      **"Signal terminate"** -- request for a processes termination. Similar to `SIGINT`
    SIGUSR1: >-
      **"Signal user 1"** -- user defined
    SIGUSR2: >-
      **"Signal user 2"** -- user defined
  Detail: |-
    {{ include "builtins/events/onSignalReceived/signal_detail.inc.md" }}

    ### Catching incoming signals

    Signals can be caught (often referred to as "trapped") in Murex with an event:
    `signalTrap`. Read below for details.
  Synonyms:
  Related:
  - bg
  - event
  - MUREX_EXE
  - out
  - onSignalReceived
  - terminal-keys
  - interactive-shell